module;
#include <concepts>
#include <expected>
#include <source_location>
#include <string_view>
#include <variant>
export module moderna.variant_error;

namespace moderna {
  /*
    variant error type. All errors require that the what() method be defined.
  */
  template <typename error_t>
  concept variant_error_t = requires(const error_t err) {
    { err.what() } -> std::convertible_to<std::string_view>;
    noexcept(err.what());
  };

  /*
    source location
  */
  template <typename error_t>
  concept variant_error_with_loc_t = requires(const error_t err) {
    { err.error_location() } -> std::same_as<const std::source_location &>;
  };

  /*
    A structure that encapsulates the error using std::variant, this is useful when passing
    multiple types of errors from down below on an std::expected to the top.
  */
  export template <variant_error_t... error_t>
    requires(sizeof...(error_t) != 0)
  struct variant_error {

    /*
      Create the error with a variant
    */
    constexpr variant_error(
      const std::variant<error_t...> err, std::source_location loc = std::source_location::current()
    ) :
      __error{err},
      __error_location{loc} {}

    /*
      Create the error and copy error info from the error location
    */
    template <variant_error_t cur_error_t>
      requires(variant_error_with_loc_t<cur_error_t>)
    constexpr variant_error(const cur_error_t &err) :
      __error{err}, __error_location{err.error_location()} {}

    /*
      Create the error with the error itself, this will capture the location of the error.
    */
    template <variant_error_t cur_error_t>
      requires(!variant_error_with_loc_t<cur_error_t>)
    constexpr variant_error(
      const cur_error_t &err, std::source_location loc = std::source_location::current()
    ) :
      __error{err},
      __error_location{loc} {}

    constexpr std::string_view what() const noexcept {
      return std::visit([](const auto &err) { return std::string_view{err.what()}; }, __error);
    }

    /*
      Checks if the current variant_error already has the contained error.
    */
    template <variant_error_t new_error_t> static constexpr bool has_error_type() {
      return (std::same_as<new_error_t, error_t> || ...);
    }

    /*
      Appends the new error type into the start of the error type list
    */
    template <variant_error_t new_error_t>
      requires(!has_error_type<new_error_t>())
    constexpr variant_error<new_error_t, error_t...> cast_add_front() const {
      return variant_error<new_error_t, error_t...>{
        std::visit([](const auto &e) { return e; }, __error), __error_location
      };
    }
    /*
      Append the error type into the back of the list
    */
    template <variant_error_t new_error_t>
      requires(!has_error_type<new_error_t>())
    constexpr variant_error<error_t..., new_error_t> cast_add_back() const {
      return variant_error<error_t..., new_error_t>{
        std::visit([](const auto &e) { return e; }, __error), __error_location
      };
    }

    /*
      Casts the current error type inot a bigger one.
    */
    template <variant_error_t... new_error_t>
      requires(variant_error<new_error_t...>::template has_error_type<error_t>() && ...)
    constexpr variant_error<new_error_t...> cast_to() const {
      return variant_error<new_error_t...>{
        std::visit([](const auto &e) { return e; }, __error), __error_location
      };
    }

    /*
      cast to another variant err that is contains all the error that this variant error have.
    */
    template <typename variant_err> constexpr auto cast_to() const {
      return decltype(cast_to(std::declval<variant_err>())
      ){std::visit([](const auto &e) { return e; }, __error), __error_location};
    }

    /*
      error location
    */
    const auto &error_location() const {
      return __error_location;
    }

  private:
    std::variant<error_t...> __error;
    std::source_location __error_location;
    template <variant_error_t... new_error_t>
      requires(variant_error<new_error_t...>::template has_error_type<error_t>() && ...)
    constexpr variant_error<new_error_t...> cast_to(variant_error<new_error_t...> err) const {
      return cast_to<new_error_t...>();
    }
  };
}